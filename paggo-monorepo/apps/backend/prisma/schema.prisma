// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(cuid())
    email     String    @unique
    name      String?
    password  String // password hash
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    chats     Chat[] // relation to Chat model
    Invoice   Invoice[]
}

model Chat {
    id               String            @id @default(cuid())
    title            String? // Optional: Can be auto-generated or user-set
    userId           String
    user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    messages         Message[] // relation to Message model
    compiledDocument CompiledDocument?

    @@index([userId])
}

enum MessageSender {
    USER
    BOT
}

model Message {
    id        String        @id @default(cuid())
    content   String        @db.Text // text for potentially long messages
    sender    MessageSender
    createdAt DateTime      @default(now())

    chatId String
    chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

    extractedOcrText String? @db.Text
    fileName         String?

    compiledDocumentAsSource CompiledDocument? @relation("SourceMessageForCompiledDoc")

    @@index([chatId])
}

model CompiledDocument {
    id String @id @default(cuid())

    chatId String @unique // Each document-based chat has one compiled document
    chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade) // This side defines fields/references

    sourceMessageId String  @unique // The message that contained the original upload and OCR text
    sourceMessage   Message @relation(name: "SourceMessageForCompiledDoc", fields: [sourceMessageId], references: [id], onDelete: Cascade) // This side defines fields/references

    originalFileName String // Copied from the sourceMessage
    extractedOcrText String @db.Text // Copied from the sourceMessage

    chatHistoryJson Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Invoice {
    id                String          @id @default(uuid())
    userId            String
    user              User            @relation(fields: [userId], references: [id])
    originalImagePath String // path or URL to the stored image
    uploadedAt        DateTime        @default(now())
    extractedTexts    ExtractedText[]
}

model ExtractedText {
    id              String   @id @default(uuid())
    invoiceId       String
    invoice         Invoice  @relation(fields: [invoiceId], references: [id])
    text            String   @db.Text // Large text field
    llmInteractions Json? // JSON field for LLM interactions
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}
